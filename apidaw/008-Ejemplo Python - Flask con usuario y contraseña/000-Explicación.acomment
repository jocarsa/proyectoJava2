En los ejercicios anteriores, podría parecer que al trabajar con Python, en cierta forma, debemos renunciar a la seguridad que nos proporciona, por ejemplo, el acceso mediante usuario y contraseña. Sin embargo, nada podría estar más lejos de la realidad. En este siguiente ejercicio, implementaremos un acceso seguro entre el cliente y el servidor, manteniendo Python en el servidor, pero esta vez implementando la autenticación con usuario y contraseña desde el lado del cliente. De esta forma, podremos comprobar que es igual de seguro crear un servidor de APIs en Python que hacerlo con cualquier otro lenguaje de servidor.

En el lado del cliente, dado que estamos realizando una autenticación con usuario y contraseña, ya no es conveniente ni óptimo realizar esta autenticación mediante JavaScript. Hacerlo de esta manera implicaría revelar el usuario y la contraseña en el código fuente de nuestro programa, lo que podría ser un riesgo de seguridad importante. Por lo tanto, en este ejercicio, el sistema informático del cliente será PHP, y no JavaScript, el que realiza la petición al sistema informático del servidor.

De esta forma, estamos comunicando dos lenguajes que, en principio, no tienen ninguna relación entre sí. Uno es Python, y el otro es PHP. Incluso podríamos decir que, para ciertas aplicaciones, podrían considerarse competidores. Sin embargo, para este ejemplo concreto, trabajan perfectamente en sincronía, cada uno sirviendo una parte de la información y utilizando una capa intermedia abstraída en medio, ya sea en formato JSON o en formato XML.

Este ejercicio demuestra que la seguridad en la comunicación entre cliente y servidor es posible y puede implementarse adecuadamente, independientemente del lenguaje de programación utilizado en el servidor. La autenticación con usuario y contraseña es una práctica común en sistemas web seguros, y este ejemplo muestra cómo se puede lograr incluso cuando se utilizan diferentes tecnologías en el lado del cliente y del servidor.